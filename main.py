"""
–ò–≥—Ä–∞ –ú–æ—Ä—Å–∫–æ–π –±–æ–π
–î–æ–ø–æ–ª–Ω–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ:
1. –í—ã–≤–æ–¥ –¥–æ—Å–æ–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ.
2. –ö—Ä–∞—Å–∏–≤—ã–µ –∑–Ω–∞—á–∫–∏ –∏ –≤–∏–¥ —Ç–∞–±–ª–∏—Ü—ã. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ—Å–∫–∏.
3. –í—ã–±–æ—Ä –±–æ–ª—å—à–æ–≥–æ(10—Ö10) –∏ –º–∞–ª–æ–≥–æ –ø–æ–ª—è(6—Ö6).
4. –î–≤–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã, –æ–±—ã—á–Ω–æ–µ –∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏(–ø–æ–¥–¥–∞–≤–∫–∏).
5. –û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å "tools" –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –¥–æ—Å–æ–∫.
6. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞.
7. –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ (—Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ 9). –î–ª—è –≤–≤–æ–¥–∞
    –Ω–∞ –±–æ–ª—å—à–æ–º –ø–æ–ª–µ "10" –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–≤–∞ —á–∏—Å–ª–∞.
    ...
–î–æ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –º–æ–º–µ–Ω—Ç —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, —Ç.–µ. –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 –¥–æ—Å–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è. –ü–æ—Ç–æ–º—É –≤–≤–µ–¥–µ–Ω–∞ "self.ai.board.result_text" –¥–ª—è
  –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–Ω–µ–Ω–∏–∏.
"""

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ windows (–º–µ—Ä—Ü–∞–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ –ø—Ä–∏ –ø–æ–±–µ–¥–µ),
#  –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å colorama: "pip install colorama" –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
#   –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ:
# from colorama import init
# init(autoreset=True)

from random import randint
from tools import Table
from BoardException import *


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f"({self.x}, {self.y})"


class Ship:
    def __init__(self, bow, l, o):
        self.bow = bow
        self.l = l
        self.o = o
        self.lives = l

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.l):
            cur_x = self.bow.x
            cur_y = self.bow.y

            if self.o == 0:
                cur_x += i
            elif self.o == 1:
                cur_y += i

            ship_dots.append(Dot(cur_x, cur_y))

        return ship_dots

    def shooten(self, shot):
        return shot in self.dots


class Board:
    PIC_SHIP = "üö¢"
    PIC_FIRE = "üî•"
    BLINK = '\033[5m'
    RESET = '\033[0m'
    PIC_FIRE_BLINK = BLINK + "üî•" + RESET
    PIC_FAIL = " ‚òÑ "
    PIC_BLANK = " " * 3

    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid
        self.giveaway = False
        self.count = 0
        self.busy = []
        self.ships = []
        self.field = [[self.PIC_BLANK] * size for _ in range(size)]
        self.result_text = ''  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.

    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.dots:
            self.field[d.x][d.y] = self.PIC_SHIP
            self.busy.append(d)

        self.ships.append(ship)
        self.contour(ship)

    def contour(self, ship, verb=False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x + dx, d.y + dy)
                if not (self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = self.PIC_FAIL
                    self.busy.append(cur)

    def __str__(self):
        cs = []
        for i in self.field:
            cs += i

        tab = Table(cs, self.size)
        res = tab.show_fields()

        if self.hid:
            if self.giveaway:
                res = res.replace(self.PIC_SHIP, " .")
            else:
                res = res.replace(self.PIC_SHIP, "  ")
        return res

    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

    def shot(self, d):
        if self.out(d):
            raise BoardOutException()

        if d in self.busy:
            raise BoardUsedException()

        self.busy.append(d)

        for ship in self.ships:
            if ship.shooten(d):
                ship.lives -= 1
                self.field[d.x][d.y] = self.PIC_FIRE
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb=True)
                    self.result_text = f"({d.x + 1} {d.y + 1}) - –ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω!"
                    return False
                else:
                    self.result_text = f"({d.x + 1} {d.y + 1}) - –ö–æ—Ä–∞–±–ª—å —Ä–∞–Ω–µ–Ω!"
                    return True

        self.field[d.x][d.y] = self.PIC_FAIL
        self.result_text = f"({d.x + 1} {d.y + 1}) - –ú–∏–º–æ!"
        return False

    def begin(self):
        self.busy = []


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)


class AI(Player):

    def ask(self):
        # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏ —Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–±–∏–≤–∞–ª –∫–æ—Ä–∞–±–ª—å.
        while True:
            d = Dot(randint(0, 5), randint(0, 5))
            if d not in self.enemy.busy:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–∏—Ç—ã—Ö —Ç–æ—á–µ–∫
                break
        return d


class User(Player):
    def ask(self):
        while True:
            s = input("\n     –í–∞—à —Ö–æ–¥: ")
            if len(s) == 2:
                x, y = s[0], s[1]
            else:
                cords = s.split()

                if len(cords) != 2:
                    print(" –í–≤–µ–¥–∏—Ç–µ 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã! ")
                    continue

                x, y = cords

            if not (x.isdigit()) or not (y.isdigit()):
                print(" –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞! ")
                continue

            x, y = int(x), int(y)

            return Dot(x - 1, y - 1)


class Game:
    def __init__(self, size=6, big_game=False, giveaway=False):
        self.size = size  # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è (–¥–æ—Å–∫–∏)
        self.lens = [3, 2, 2, 1, 1, 1, 1]  # –∫–æ—Ä–∞–±–ª–∏
        if big_game:
            self.lens = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]  # –∫–æ—Ä–∞–±–ª–∏
        pl = self.random_board()  # –¥–æ—Å–∫–∞ –∏–≥—Ä–æ–∫–∞
        co = self.random_board()  # –¥–æ—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        co.hid = True  # —Å–ø—Ä—è—Ç–∞—Ç—å –∫–æ—Ä–∞–±–ª–∏
        self.giveaway = giveaway  # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞ –∫–æ—Ä–∞–±–ª–µ–π (–ø–æ–¥–¥–∞–≤–∫–∏)

        self.ai = AI(co, pl)  # –∏–≥—Ä–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä
        self.us = User(pl, co)  # –∏–≥—Ä–æ–∫

    def random_board(self):
        board = None
        while board is None:
            board = self.random_place()
        return board

    def random_place(self):
        board = Board(size=self.size)
        attempts = 0
        for l in self.lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board

    @staticmethod
    def greet():
        print()
        print("     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("     ‚îÇ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –∏–≥—Ä–µ `–ú–æ—Ä—Å–∫–æ–π –±–æ–π` ‚îÇ")
        print("     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("     ‚îÇ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: x y (–º–æ–∂–Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞) ‚îÇ")
        print("     ‚îÇ  x - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, y - –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞  ‚îÇ")
        print("     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò", end='')

    def loop(self):
        num = 0
        s = ''
        repeat_ai = False

        self.ai.board.giveaway = self.giveaway

        while True:
            tables_str = Table.join_tables(self.ai.board.__str__(), self.us.board.__str__())

            if num % 2 == 0:
                print("\n " + '_' * 80 + "\n")
                print(" " * 10, "–î–æ—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:", " " * 30, "–í–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏:")
                print(tables_str)

                if repeat_ai:
                    print(s)
                    repeat_ai = False

                s = " " * 5 + f"–í—ã: {self.ai.board.result_text}"
                print(f"{s:<50}" + f"–ö–æ–º–ø—å—é—Ç–µ—Ä: {self.us.board.result_text}")

                repeat = self.us.move()
            else:
                repeat = self.ai.move()
                if repeat:
                    repeat_ai = True
                    s = f"{' ':<50}" + f"–ö–æ–º–ø—å—é—Ç–µ—Ä: {self.us.board.result_text}"

            if repeat:
                num -= 1
            if self.ai.board.count == len(self.lens):
                str_ai = self.ai.board.__str__()
                str_ai = str_ai.replace(Board.PIC_FIRE, Board.PIC_FIRE_BLINK)
                tables_str = Table.join_tables(str_ai, self.us.board.__str__())
                print(tables_str)
                s = " " * 5 + f"–í—ã: {self.ai.board.result_text}"
                print(f"{s:<50}" + f"–ö–æ–º–ø—å—é—Ç–µ—Ä: {self.us.board.result_text}\n")
                print(Board.BLINK + "     *** –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! ***\n" + Board.RESET)
                break

            if self.us.board.count == len(self.lens):
                self.ai.board.hid = False
                str_us = self.us.board.__str__()
                str_us = str_us.replace(Board.PIC_FIRE, Board.PIC_FIRE_BLINK)
                tables_str = Table.join_tables(self.ai.board.__str__(), str_us)
                print(tables_str)
                print(f"{s:<50}" + f"–ö–æ–º–ø—å—é—Ç–µ—Ä: {self.us.board.result_text}\n")
                print(" " * 50 + Board.BLINK + "* –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∏–≥—Ä–∞–ª! *\n" + Board.RESET)
                break

            num += 1

    def start(self):
        self.greet()
        self.loop()


if __name__ == '__main__':
    Game.greet()
    print("\n\n     –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ Enter")
    b_game = input("\n     –ò–≥—Ä–∞—Ç—å –Ω–∞ –±–æ–ª—å—à–æ–º –ø–æ–ª–µ? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï–¢)\n"
                   "      (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª): ")
    give_away = input("\n     –ò–≥—Ä–∞—Ç—å –≤ –ø–æ–¥–¥–∞–≤–∫–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï–¢)\n"
                      "      (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª): ")
    print("\n\n     –ï—Å–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–æ—Å–∫–∏, \n"
          "        –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ '–ë–æ–ª—å—à–æ–π –∏–≥—Ä–µ', \n"
          "     —Ä–∞—Å—à–∏—Ä—å—Ç–µ –æ–∫–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞(–∫–æ–Ω—Å–æ–ª–∏) ")
    if b_game:
        g = Game(10, big_game=True, giveaway=give_away)
    else:
        g = Game(6, big_game=False, giveaway=give_away)

    g.start()
