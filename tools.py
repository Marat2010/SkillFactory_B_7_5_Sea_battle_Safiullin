class Table:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    –¢–∞–±–ª–∏—Ü—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤ –≤–∏–¥–µ str, –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤–æ–∑–º–æ–∂–Ω–æ –ª—é–±–æ–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ.
    """

    INDENT = 8  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏

    def __init__(self, cells, size=6):
        self.size = size
        self.cells = cells

    @staticmethod
    def gen_row_cells(cells: list, size=6) -> list:
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –≤—ã–¥–∞—á–∏ –∑–Ω–∞—á–µ–Ω–∏–π —è—á–µ–π–∫–∏
         –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã, —Ç.–µ. –≤—ã–¥–∞—á–∞ —Å—Ç—Ä–æ–∫–∏.

        :param cells: —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É.
        :param size: —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã (6—Ö6).
        :return: —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
        """

        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫ –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª–Ω—ã–π:
        cells_copy = cells + [' ' * 3] * (size ** 2 - len(cells))
        while True:
            row = cells_copy[:size]
            yield row
            cells_copy = cells_copy[size:]
            if not len(cells_copy):
                break

    def show_fields(self) -> str:
        """
        –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å "\n" –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–µ—á–∞—Ç–∏ –µ–µ.
        :return: –û–±—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏.
        """

        table_string = '\nxüëá\yüëâ'
        for i in range(1, self.size + 1):
            table_string += f'{i:^5}'
        table_string += '\n'

        top = (' ' * 6 + '‚îå' + '‚îÄ‚îÄ‚îÄ‚îÄ‚î¨' * (self.size - 1) + '‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n' + f' {1:=3}  ')
        data_row = ('‚îÇ' + '{:>2} ') * self.size
        middle_row = ('‚îÇ\n' + ' ' * 6 + '‚îú' + '‚îÄ‚îÄ‚îÄ‚îÄ‚îº' * (self.size - 1) + '‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n' + ' {:=3}  ')
        bottom = ('‚îÇ\n' + ' ' * 6 + '‚îî' + '‚îÄ‚îÄ‚îÄ‚îÄ‚î¥' * (self.size - 1) + '‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n')

        lst = [top, ]
        for s in range(self.size - 1):
            lst.append(data_row)
            lst.append(middle_row.format(s + 2))
        lst.append(data_row)
        lst.append(bottom)

        gen_row = iter(self.gen_row_cells(self.cells, self.size))

        for i, s in enumerate(lst):
            if i % 2:  # –°—Ç—Ä–æ–∫–∏ (–Ω–µ—á–µ—Ç–Ω—ã–µ) –∫—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ free_cells
                s = s.format(*next(gen_row))
            table_string += s

        return table_string

    @staticmethod
    def join_tables(*tables) -> str:
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
        :param tables: —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü (—Ç–∞–±–ª–∏—Ü–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏), –º–æ–∂–µ—Ç –±—ã—Ç—å 2, 3 ...
        :return: –û–±—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏.
        """

        lst_tables = []
        for tab in tables:
            lst_tables.append(tab.split('\n'))
        new_str = ''
        for st in zip(*lst_tables):  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü.
            for i in st:
                new_str += i + " " * Table.INDENT
            new_str += '\n'

        return new_str



